1:继承(掌握)
	(1)把多个类中相同的属性和行为提取出来，定义到一个类中，
	   然后让这多个类和这一个类产生一个关系，这多个类就具备这一个类的属性和行为了。
	   这种关系叫：继承。
	(2)继承如何表示的呢?
		格式：class 子类名 extends 父类名 {}
	(3)java中的继承特点：
		A:java中只能单继承
		B:java中可以多层继承。(继承体系)
	(4)java中的继承的好处和弊端
		A:好处	
			a:提高了代码的复用性
			b:提高了代码的可维护性
			c:让类与类之间产生了一个关系，是多态的前提
		B:弊端
			让类与类的耦合增强了。这样一个类的改动会直接影响另一个类。

			设计原则：高内聚，低耦合。
	(5)java中的继承的注意事项：
		A:私有成员不能被继承
		B:构造方法不能被继承，想访问，通过super关键字
		C:不能为了部分功能而去使用继承
	(6)继承中的成员关系：
		A:成员变量
			不同名：特别简单，一看就知道用的是谁。
			同名：就近原则
				访问自己的用this
				访问父亲的用super
		B:构造方法
			a:子类的所有构造方法默认都是访问父类的无参构造方法
			b:如果父类没有无参构造方法，怎么办呢?
				通过super(...)访问父类带参构造方法
				通过this(...)访问本类其他构造方法。(一定要有一个访问了父类的构造方法)
				注意：super或者this只能出现一个，并且只能在语句的第一条语句。
			为什么呢?
				因为子类可能会访问父类的数据，所以，在子类初始化之前，要先把父类数据初始化完毕。
		C:成员方法
			不同名：特别简单，一看就知道用的是谁。
			同名：就近原则
				访问自己的用this
				访问父亲的用super
	(7)this和super的区别及应用场景
		A:区别
			this：本类对象的引用
			super：父类存储空间的标识。可以理解为父类对象的引用。

		B:应用场景
			a:成员变量
				this.变量 本类的成员变量
				super.变量 父类的成员变量
			b:构造方法
				this(...) 本类的构造方法
				super(...) 父类的构造方法
			c:成员方法
				this.方法名(...) 本类的成员方法
				super.方法名(...) 父类的成员方法
	(8)练习：
		老师类和学生类练习：
			继承前：
			继承后：
		猫类和狗类练习：
			继承前：
			继承后：

2:方法重写(掌握)
	(1)描述：在子类中，出现了和父类中一模一样的方法声明的现象。
	(2)作用：可以使用父类功能，还可以增强该功能。
	(3)面试题：
		override和overload的区别?
		overload可以改变返回值类型吗?
	(4)方法重写的注意事项：
		A:父类私有方法不能被重写
		B:子类重写方法的访问权限不能比父类的方法低
		C:静态只能重写静态。(其实这算不上重写)

3:final关键字(掌握)
	(1)final:最终的意思
	(2)作用：可以修饰类，修饰成员变量，修饰成员方法
	(3)特点：
		A:修饰类 类不能被继承
		B:修饰成员变量 变量变成了常量
		C:修饰成员方法 方法不能被重写
	(4)面试题：
		A:final修饰局部变量
			a:基本类型 值不能发生改变
			b:引用类型 地址值不能发送改变，对象的内容是可以改变的
		B:final的初始化时机
			a:在定义时就赋值
			b:在构造方法完毕前赋值

4:多态(掌握)
	(1)多态：同一个对象，在不同时刻表现出来的多种状态
		举例：水，猫和动物
	(2)多态的前提：
		A:有继承关系
		B:有方法重写
		C:有父类引用指向子类对象
	(3)多态中的成员访问特点：
		A:成员变量
			编译看左边，运行看左边
		B:成员方法
			编译看左边，运行看右边
		C:静态方法
			编译看左边，运行看左边

		为什么：
			因为方法有重写，而变量没有。静态方法没有重写一说。